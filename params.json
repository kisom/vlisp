{"name":"VLisp","tagline":"Experiments building a formally-verified Lisp.","body":"# VLisp: A Formally Verified Lisp\r\n\r\nThis contains experiments in building a formally-verified Lisp using\r\nCoq, mostly to serve as a practical project to drive learning Coq\r\nfurther. My background is in systems engineering and more low-level\r\nUnix systems programming, particularly in Go and C; as I begin to work\r\nthrough CPDT, I'd like to use this to help focus my learning. Expect\r\nit to be crude and inelegant at first, but I am very open to comments\r\nto improve it.\r\n\r\n### Questions\r\n\r\nSome of the questions I want to explore are:\r\n\r\n* What does a formally-verified Lisp look like (syntax)?\r\n* How does a formally-verified Lisp behave (semantics)?\r\n* What guarantees can we make about the behaviour of a formally\r\n  verified Lisp?\r\n* Assuming Lisp is considered as a sort of \"McCarthy's Equations of\r\n  Software\", a la Maxwell's equations, if a Lisp can modelled after\r\n  McCarthy's equations, what theorems can we make about it's behaviour\r\n  and properties?\r\n* What are the practical, useful implications of these theorems?\r\n\r\n### Progress\r\n\r\nAs research and development on this project progresses, it will be\r\ndocumented in a [paper](http://files.kyleisom.net/vlisp/paper.pdf).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}